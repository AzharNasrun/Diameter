package model;

import java.util.Collections;
import java.util.Hashtable;
import java.util.Map;

public enum AVPCode {

    ORIGIN_HOST(264),
    ORIGIN_REALM(296),
    HOST_IP_ADDRESS(257),
    VENDOR_ID(266),
    PRODUCT_NAME(269),
    LCS_PRIVACY_CHECK(512),
    SESSION_ID(263),
    GMLC_ADDRESS(2405),
    GMLC_NUMBER(1474),
    LMSI(2400),
    MSISDN(701),
    LCS_CAPABILITIES_SET(2404),
    EXPERIMENTAL_RESULT(297),
    SERVING_NODE(2401),
    ESMLC_CELL_INFO(2552),
    LCS_INFORMATION(878),
    USER_IDENTIFIER(3102),
    ADDITIONAL_SERVING_NODE(2406),
    SUPPORTED_FEATURES(628),
    OC_SUPPORTED_FEATURES(621),
    PROXY_INFO(284),
    USER_IDENTITY(700),
    EXPERIMENTAL_RESULT_CODE(298),
    SC_ADDRESS(3300),
    FEATURE_LIST_ID(629),
    FEATURE_LIST(630),
    OC_FEATURE_VECTOR(622),
    MME_NAME(2402),
    MME_REALM(2408),
    MME_NUMBER( 1645),
    SGSN_REALM(2410),
    SGSN_NAME(2409),
    SGSN_NUMBER( 1489),
    _3GPP_AAA_SERVER_NAME(318),
    MSC_NUMBER(2403),
    LOCATION_ESTIMATE(1242),
    ACCURACY_FULFILLMENT_INDICATOR(2513),
    VELOCITY_ESTIMATE(2515),
    EUTRAN_POSITIONING_DATA(2516),
    ECGI(2517),
    USERNAME(1),
    PROXY_HOST(280),
    PROXY_STATE(33),
    INBAND_SECURITY_ID(299),
    AUTH_APPLICATION_ID(258),
    AUTH_SESSION_STATE(277),
    ORIGIN_STATE_ID(278),
    RESULT_CODE(268),
    FIRMWARE_REVISION(267),
    AGE_OF_LOCATION_ESTIMATE(2514),
    DESTINATION_REALM(283),
    PPR_ADDRESS(2407),
    MWD_STATUS(3312),
    CELL_GLOBAL_IDENTITY(1604),
    WILDCARDED_IMPU(636),
    USER_DATA_SH(702),
    ROUTE_RECORD(282),
    PUBLIC_IDENTITY(601),
    DRMP(301),
    DESTINATION_HOST(293),
    DATA_REFERENCE(703),
    SERVICE_INDICATION(704),
    WILDCARDED_PUBLIC_IDENTITY(634),
    SLG_LOCATION_TYPE(2500),
    LCS_CLIENT_TYPE(1241),
    LCS_FORMAT_INDICATOR(1237),
    LCS_NAME_STRING(1238),
    LCS_EPS_CLIENT_NAME(2501),
    MME_NUMBER_FOR_MT_SMS(1645),
    IP_SM_GW_NUMBER(3100),
    IP_SM_GW_NAME(3101),
    IP_SM_GW_REALM(3112),
    RAT_TYPE(1032),
    VISITED_PLMN_ID(1407),
    ACCT_APPLICATION_ID(259),
    VENDOR_SPECIFIC_APPLICATION_ID(260),
    SERVER_NAME(602),
    LCS_PRIVACY_CHECK_NON_SESSION(2521),
    LCS_SUPPORTED_GAD_SHAPES(2510),
    RESPONSE_TIME(2509),
    VERTICAL_REQUESTED(2507),
    VERTICAL_ACCURACY(2506),
    HORIZONTAL_ACCURACY(2505),
    LCS_PRIORITY(2503),
    LCS_QOS(2504),
    LCS_QOS_CLASS(2523),
    REQUESTED_DOMAIN(706),
    REQUESTED_NODES(713),
    CURRENT_LOCATION(707),
    ULR_FLAGS(1405),
    SRR_FLAGS(3310),
    SM_RP_SMEA(3309),
    MME_ABSENT_USER_DIAGNOSTIC_SM(3313),
    MSC_ABSENT_USER_DIAGNOSTIC_SM(3314),
    SGSN_ABSENT_USER_DIAGNOSTIC_SM(3315),
    SM_RP_MTI(3308);




    private long code;

    AVPCode(long code) {
        this.code = code;
    }

    private static final Map<Long, AVPCode> MY_MAP = Collections.synchronizedMap(new Hashtable<Long, AVPCode>());

    static {
        for (AVPCode myEnum : values()) {
            MY_MAP.put(myEnum.getCode(), myEnum);
        }
    }

    public long getCode() {
        return code;
    }

    /**
     * To Get AVPCode Object By Code
     *
     * @param code
     * @return
     */
    public static AVPCode getByCode(long code) {
        return MY_MAP.get(code);
    }
}
